<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Snake Game</title>
  <style>
    body {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100vh;
      margin: 0;
    }

    canvas {
      border: 1px solid #ddd;
    }
  </style>
</head>
<body>
  <canvas id="snakeCanvas" width="400" height="400"></canvas>

  <script>
    const canvas = document.getElementById('snakeCanvas');
    const ctx = canvas.getContext('2d');

    const boxSize = 20;
    let snake = [{ x: 10, y: 10 }];
    let food = { x: 5, y: 5 };
    let direction = 'right';
    let changingDirection = false;
    let score = 0;
    let level = 1;
    let obstacles = [];

    function draw() {
      // Clear the canvas
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      // Draw obstacles
      ctx.fillStyle = '#ecf0f1';
      obstacles.forEach(obstacle => {
        ctx.fillRect(obstacle.x * boxSize, obstacle.y * boxSize, boxSize, boxSize);
      });

      // Draw snake
      snake.forEach(segment => {
        ctx.fillStyle = '#3498db';
        ctx.fillRect(segment.x * boxSize, segment.y * boxSize, boxSize, boxSize);
      });

      // Draw food
      ctx.fillStyle = '#e74c3c';
      ctx.fillRect(food.x * boxSize, food.y * boxSize, boxSize, boxSize);

      // Draw score and level
      ctx.fillStyle = '#2c3e50';
      ctx.font = '16px Arial';
      ctx.fillText(`Score: ${score}`, 10, 20);
      ctx.fillText(`Level: ${level}`, canvas.width - 80, 20);
    }

    function move() {
      const head = { ...snake[0] };

      // Update the direction of the head based on the current direction
      switch (direction) {
        case 'up':
          head.y--;
          break;
        case 'down':
          head.y++;
          break;
        case 'left':
          head.x--;
          break;
        case 'right':
          head.x++;
          break;
      }

      // Check for collision with food
      if (head.x === food.x && head.y === food.y) {
        // Generate a new random position for the food
        food = generateRandomPosition();

        // Increase score and check for level up
        score++;
        if (score % 5 === 0) {
          level++;
          generateObstacles();
        }
      } else {
        // If no collision with food, remove the tail segment
        snake.pop();
      }

      // Check for collision with walls, self, or obstacles
      if (
        head.x < 0 ||
        head.y < 0 ||
        head.x >= canvas.width / boxSize ||
        head.y >= canvas.height / boxSize ||
        collisionWithSelf() ||
        collisionWithObstacle(head)
      ) {
        alert('Game Over!');
        resetGame();
      }

      // Check for level completion
      if (score === level * 5) {
        alert(`Level ${level} completed!`);
        level++;
        generateObstacles();
      }

      // Add the new head to the front of the snake
      snake.unshift(head);

      changingDirection = false;
      draw();
    }

    function collisionWithSelf() {
      for (let i = 1; i < snake.length; i++) {
        if (snake[i].x === snake[0].x && snake[i].y === snake[0].y) {
          return true;
        }
      }
      return false;
    }

    function collisionWithObstacle(head) {
      return obstacles.some(obstacle => obstacle.x === head.x && obstacle.y === head.y);
    }

    function generateObstacles() {
      obstacles = [];
      for (let i = 0; i < level; i++) {
        obstacles.push(generateRandomPosition());
      }
    }

    function generateRandomPosition() {
      return {
        x: Math.floor(Math.random() * (canvas.width / boxSize)),
        y: Math.floor(Math.random() * (canvas.height / boxSize))
      };
    }

    function resetGame() {
      snake = [{ x: 10, y: 10 }];
      food = generateRandomPosition();
      direction = 'right';
      score = 0;
      level = 1;
      generateObstacles();
      draw();
    }

    // Listen for arrow key presses
    window.addEventListener('keydown', function (event) {
      if (changingDirection) return;

      switch (event.key) {
        case 'ArrowUp':
          if (direction !== 'down') {
            direction = 'up';
            changingDirection = true;
          }
          break;
        case 'ArrowDown':
          if (direction !== 'up') {
            direction = 'down';
            changingDirection = true;
          }
          break;
        case 'ArrowLeft':
          if (direction !== 'right') {
            direction = 'left';
            changingDirection = true;
          }
          break;
        case 'ArrowRight':
          if (direction !== 'left') {
            direction = 'right';
            changingDirection = true;
          }
          break;
      }
    });

    // Start the game loop
    setInterval(move, 200); // Adjust the interval for snake speed
  </script>
</body>
</html>
